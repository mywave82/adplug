name: AdPlug autotools CI

on:
  - push
  - pull_request

jobs:
  build:

    strategy:

      matrix:
        os: [ubuntu-latest, macos-latest]
        compiler: [gcc, clang]
        include:
          - compiler: gcc-4.8 # To test compatibility with older systems
            os: ubuntu-latest
          - compiler: djgpp-2.0.5-gcc-12.2.0 # To test compatibility for Adplay - DOS
            os: ubuntu-latest
          - compiler: powerpc-gcc # To test compatibility with big-endian powerpc
            os: ubuntu-latest
          - compiler: powerpc64-gcc # To test compatibility with big-endian powerpc
            os: ubuntu-latest
          - compiler: powerpcle64-gcc # To test compatibility with little-endian powerpc
            os: ubuntu-latest

      fail-fast: false

    runs-on: ${{matrix.os}}

    steps:
    - uses: actions/checkout@v4

    - name: Install packages (Linux)
      if: ${{ runner.os == 'Linux' }}
      run: |
        sudo apt update
        sudo apt install -y texlive-latex-base texinfo

        if [[ ${{ matrix.compiler }} == "clang" ]]; then
          sudo apt install -y build-essential clang
        fi

        if [[ ${{ matrix.compiler }} == "gcc-4.8" ]]; then
          wget http://archive.ubuntu.com/ubuntu/pool/universe/g/gcc-4.8/g++-4.8_4.8.5-4ubuntu8_amd64.deb
          wget http://archive.ubuntu.com/ubuntu/pool/universe/g/gcc-4.8/libstdc++-4.8-dev_4.8.5-4ubuntu8_amd64.deb
          wget http://archive.ubuntu.com/ubuntu/pool/universe/g/gcc-4.8/gcc-4.8-base_4.8.5-4ubuntu8_amd64.deb
          wget http://archive.ubuntu.com/ubuntu/pool/universe/g/gcc-4.8/gcc-4.8_4.8.5-4ubuntu8_amd64.deb
          wget http://archive.ubuntu.com/ubuntu/pool/universe/g/gcc-4.8/libgcc-4.8-dev_4.8.5-4ubuntu8_amd64.deb
          wget http://archive.ubuntu.com/ubuntu/pool/universe/g/gcc-4.8/cpp-4.8_4.8.5-4ubuntu8_amd64.deb
          wget http://archive.ubuntu.com/ubuntu/pool/universe/g/gcc-4.8/libasan0_4.8.5-4ubuntu8_amd64.deb
          sudo apt install ./gcc-4.8_4.8.5-4ubuntu8_amd64.deb ./gcc-4.8-base_4.8.5-4ubuntu8_amd64.deb ./libstdc++-4.8-dev_4.8.5-4ubuntu8_amd64.deb ./cpp-4.8_4.8.5-4ubuntu8_amd64.deb ./libgcc-4.8-dev_4.8.5-4ubuntu8_amd64.deb ./libasan0_4.8.5-4ubuntu8_amd64.deb ./g++-4.8_4.8.5-4ubuntu8_amd64.deb
        fi

        if [[ ${{ matrix.compiler }} = djgpp* ]]; then
          # Flex is required, but even though it's in the GitHub runner image, and marked as installed
          # it's still missing some things, see https://github.com/orgs/community/discussions/45029
          sudo apt install -y libfl2 libfl-dev software-properties-common
          # Install dosemu2 for testing
          sudo add-apt-repository -y ppa:dosemu2/ppa
          sudo apt install -y dosemu2 unzip
          # We need CWSDPMI as well if we want to run any DOS programs.
          wget https://www.delorie.com/pub/djgpp/current/v2misc/csdpmi7b.zip
          unzip -j -o "csdpmi7b.zip" "bin/CWSDPMI.EXE" -d ./test

          if [[ ${{ matrix.compiler }} == "djgpp-2.0.5-gcc-12.2.0" ]]; then
            wget https://github.com/andrewwutw/build-djgpp/releases/download/v3.4/djgpp-linux64-gcc1220.tar.bz2
            bzcat djgpp-linux64-gcc1220.tar.bz2 | sudo tar -x --directory /usr/local
          fi
        fi

        if [[ ${{ matrix.compiler }} = powerpc-gcc ]]; then
          sudo apt install -y g++-powerpc-linux-gnu gcc-powerpc-linux-gnu qemu-user
        fi
        if [[ ${{ matrix.compiler }} = powerpc64-gcc ]]; then
          # qemu does not support powerpc64
          sudo apt install -y g++-powerpc64-linux-gnu gcc-powerpc64-linux-gnu
        fi
        if [[ ${{ matrix.compiler }} = powerpcle64-gcc ]]; then
          sudo apt install -y g++-powerpc64le-linux-gnu gcc-powerpc64le-linux-gnu qemu-user
        fi

    - name: Install packages (macOS)
      if: ${{ runner.os == 'macOS' }}
      run: |
        # Allow core dumps
        sudo sh -c 'touch /cores/test && rm /cores/test && chmod -R 0777 /cores'
        brew update
        # See comment in 'make' step (this takes good 20 mins)
        #brew install --cask mactex-no-gui
        brew install automake texinfo libtool

    # - name: Install LLVM and Clang (Linux)
    #   if: ${{ matrix.compiler == 'clang' && runner.os != 'macOS' }}
    #   uses: KyleMayes/install-llvm-action@v1
    #   with:
    #     version: "10.0"

# adplug_env    is for `adplug`                configure and make distcheck
# compile_env   is for `libbinio` and `adplug` configure and make distcheck
# compile_opts  is for `libbinio` and `adplug` configure

    - name: Set GCC environment (Linux)
      if: ${{ matrix.compiler == 'gcc' && runner.os == 'Linux'}}
      run: |
        echo 'adplug_env=CFLAGS="-O2 -pipe -fsanitize=address -fsanitize=leak" CXXFLAGS="-O2 -pipe -fsanitize=address -fsanitize=leak" CPPFLAGS="-fsanitize=address -fsanitize=leak" LDFLAGS="-Wl,-O1 -Wl,--as-needed -Wl,--gc-sections"' >> $GITHUB_ENV

    - name: Set GCC-4.8 environment (Linux)
      if: ${{ matrix.compiler == 'gcc-4.8' }}
      run: echo 'compile_env=CC=gcc-4.8 CXX=g++-4.8' >> $GITHUB_ENV

    - name: Set GCC environment (macOS)
      if: ${{ matrix.compiler == 'gcc' && runner.os == 'macOS' }}
      run: echo 'compile_env=CC=gcc CXX=g++' >> $GITHUB_ENV

    - name: Set Clang environment
      if: ${{ matrix.compiler == 'clang' }}
      run: echo 'compile_env=CC=clang CXX=clang++' >> $GITHUB_ENV

    - name: Set DJGPP environment
      if: ${{ startsWith(matrix.compiler, 'djgpp') }}
      run: |
        echo 'compile_opts=--host=i586-pc-msdosdjgpp --prefix=/usr/local/djgpp' >> $GITHUB_ENV 
        echo 'adplug_env=CFLAGS="-O2 -pipe" CXXFLAGS="-O2 -pipe -Wno-deprecated" CPPFLAGS="-O2 -pipe -Wno-deprecated" LDFLAGS="-Wl,-O1 -Wl,--as-needed -Wl,--no-undefined -Wl,--gc-sections" PKG_CONFIG_PATH=/usr/local/djgpp/lib/pkgconfig' >> $GITHUB_ENV
        echo '/usr/local/djgpp/bin/' >> $GITHUB_PATH

    - name: Set PowerPC-GCC environment
      if: ${{ matrix.compiler == 'powerpc-gcc' }}
      run: |
        echo 'compile_opts=--host=powerpc-linux-gnu --prefix=/usr/local/powerpc'>> $GITHUB_ENV
        echo 'compile_env=PKG_CONFIG_PATH=/usr/local/powerpc/lib/pkgconfig MAKE="make stresstest_wrapper=./qemu-wrapper.sh"'>> $GITHUB_ENV
        echo -e '#!/bin/sh\nexec qemu-ppc -L /usr/local/powerpc -L /usr/powerpc-linux-gnu "$@"' > qemu-wrapper.sh
        chmod 755 qemu-wrapper.sh

    - name: Set PowerPC64-GCC environment
      if: ${{ matrix.compiler == 'powerpc64-gcc' }}
      run: |
        echo 'compile_opts=--host=powerpc64-linux-gnu --prefix=/usr/local/powerpc64'>> $GITHUB_ENV
        echo 'compile_env=PKG_CONFIG_PATH=/usr/local/powerpc64/lib/pkgconfig' >> $GITHUB_ENV
        #qmeu does not support powerpc64
        #echo -e '#!/bin/sh\nexec qemu-ppc -L /usr/local/powerpc64 -L /usr/powerpc64-linux-gnu "$@"' > qemu-wrapper.sh
        #chmod 755 qemu-wrapper.sh

    - name: Set PowerPC64LE-GCC environment
      if: ${{ matrix.compiler == 'powerpc64le-gcc' }}
      run: |
        echo 'compile_opts=--host=powerpc64le-linux-gnu --prefix=/usr/local/powerpc64le'>> $GITHUB_ENV
        echo 'compile_env=PKG_CONFIG_PATH=/usr/local/powerpc64le/lib/pkgconfig MAKE="make stresstest_wrapper=./qemu-wrapper.sh"'>> $GITHUB_ENV
        echo -e '#!/bin/sh\nexec qemu-ppc -L /usr/local/powerpc64le -L /usr/powerpc64le-linux-gnu "$@"' > qemu-wrapper.sh
        chmod 755 qemu-wrapper.sh

    - name: Install libbinio
      run: |
        git clone http://github.com/adplug/libbinio.git
        pushd libbinio && autoreconf -i && ./configure --enable-maintainer-mode ${{ env.compile_opts }} ${{ env.compile_env }} && make ${{ env.compile_env }} && sudo env PATH=$PATH make install && popd

    - name: autoreconf
      run: autoreconf -i
    - name: configure
      run: ./configure ${{ env.compile_opts }} ${{ env.compile_env }} ${{ env.adplug_env }} || cat config.log

    # make distcheck ensure that it is possible build in an external build-directory, and perform `make check`.
    # The later fail for cross-builds is due to the need for running scripts that needs to be patched.
    # Also distcheck fails on macOS due to missing LaTeX, so restrict to Linux only.
    - name: make distcheck
      if: ${{ matrix.compiler == 'gcc' && runner.os == 'Linux' }}
      env:
        DISTCHECK_CONFIGURE_FLAGS: "${{ env.compile_opts }} ${{ env.compile_env }} ${{ env.adplug_env }}"
      run: |
        make distcheck ${{ env.compile_env }} ${{ env.adplug_env }}

    - name: make
      run: |
        ulimit -c unlimited -S
        make all ${{ env.compile_env }} ${{ env.adplug_env }} && sudo env PATH=$PATH make install

        # cross-platform needs to patch the helper scripts for `make check`, so please prepare them - and patch them
        # Sidenote: DJGPP will generate test/crctest.exe test/emutest.exe test/playtest.exe and test/strstest.exe; and they will NOT be scripts
        if  [[ ${{ matrix.compiler }} == "powerpc-gcc" ]]; then
          make test/crctest test/emutest test/playtest test/strstest ${{ env.compile_env }} ${{ env.adplug_env }}
          sed -e 's/exec "/exec qemu-ppc -L \/usr\/local\/powerpc -L \/usr\/powerpc-linux-gnu "/' -i test/crctest test/emutest test/playtest test/strstest
        elif  [[ ${{ matrix.compiler }} == "powerpc64-gcc" ]]; then
          make test/crctest test/emutest test/playtest test/strstest ${{ env.compile_env }} ${{ env.adplug_env }}
          sed -e 's/exec "/exec qemu-ppc -L \/usr\/local\/powerpc64 -L \/usr\/powerpc64-linux-gnu "/' -i test/crctest test/emutest test/playtest test/strstest
        elif  [[ ${{ matrix.compiler }} == "powerpc64le-gcc" ]]; then
          make test/crctest test/emutest test/playtest test/strstest ${{ env.compile_env }} ${{ env.adplug_env }}
          sed -e 's/exec "/exec qemu-ppc -L \/usr\/local\/powerpc64le -L \/usr\/powerpc64le-linux-gnu "/' -i test/crctest test/emutest test/playtest test/strstest
        fi

    - name: Prepare test results
      # qemu currently does not work with powerpc64-gcc, so skip that single instance
      if: ${{ (runner.os == 'Linux' || runner.os == 'macOS') && (matrix.compiler != 'powerpc64-gcc') }}
      run: |
        if [[ ${{ matrix.compiler }} = djgpp* ]]; then
          export LOG_COMPILER="dosemu"
          export AM_LOG_FLAGS="-dumb $f"
        fi
        make -j1 check ${{ env.compile_env }} ${{ env.adplug_env }}

    - name: Show test results
      run: |-
        for I in test/*.log; do
          [ -e "$I" ] || continue
          echo === $I ===
          cat $I
        done

    - name: Handle failure
      if: failure()
      run: |-
        if [[ ${{ runner.os }} == "Linux" ]]; then
          # When "make distcheck" fails, following directory will be used for all files
          pushd adplug-*/_build/sub || true
        fi

        for I in test/*.log; do
          [ -e "$I" ] || continue
          echo === $I ===
          cat $I
        done

        if [[ ${{ runner.os }} == "Linux" ]]; then
          if [ -f core ]; then
            export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:./src/.libs/"
            if [ -e "./tests/.libs/tests" ]; then
              gdb ./tests/.libs/tests core -ex "thread apply all bt" -ex "set pagination 0" -batch
            else
              # This needs to be fixed
              echo "./tests/.libs/tests: not found"
            fi
          else
            echo "No core dump; skipping gdb for backtrace"
          fi

        elif [[ ${{ runner.os }} == "macOS" ]]; then
          # Make the build output lib dir located where dylib looks as default fallback,
          # since setting DYLD_FALLBACK_LIBRARY_PATH doesn't seem to work
          ln -s `pwd`"/src/.libs" "$HOME/lib"

          # Run the tests with core dumps enabled
          if [ -e "./tests/.libs/tests" ]; then
            ulimit -c unlimited && ./tests/.libs/tests --no_catch_system_errors
          else
            # This needs to be fixed
            echo "./tests/.libs/tests: not found"
          fi

          # Look for a core dump and examine it if found
          COREFILE=`ls -t /cores/* | head -n1`
          if [ -f "$COREFILE" ]; then
            echo "Found core dump: $COREFILE"
            lldb -c "$COREFILE" --batch -o 'thread backtrace all' -o 'quit'
          else
            echo "No core dump; skipping lldb for backtrace"
          fi
        else
          echo "Unknown OS, cannot check for core dump"
        fi

        for I in *.test; do
          [ -e "$I" ] || continue
          echo === Failed test output for $I [first 200 lines only] ===
          head -n 200 $I
        done
        echo == End of test log ==

        if [[ ${{ runner.os }} == "Linux" ]]; then
          popd || true
        fi

    - name: Upload failed test output
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: adplug-tests-${{runner.os}}-${{matrix.compiler}}-${{github.sha}}
        path: |
          adplug-*/_build/sub/*.test
          *.test
          *.log
          libbinio/*.log
